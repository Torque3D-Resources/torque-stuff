diff -u -r /cygdrive/c/Torque/SDK/engine/core/resManager.cc ./core/resManager.cc
--- /cygdrive/c/Torque/SDK/engine/core/resManager.cc	2006-10-25 22:37:52.000000000 +0100
+++ ./core/resManager.cc	2006-11-07 23:18:55.859375000 +0000
@@ -8,10 +8,7 @@
 #include "core/stream.h"
 
 #include "core/fileStream.h"
-#include "core/zipSubStream.h"
-#include "core/zipAggregate.h"
-#include "core/zipHeaders.h"
-#include "core/resizeStream.h"
+#include "core/resContainer.h"
 #include "core/frameAllocator.h"
 
 #include "core/resManager.h"
@@ -22,9 +19,39 @@
 
 #include "util/safeDelete.h"
 
+#define RES_ENABLECONTAINERWRITE // new files and containers can be created
+
 ResManager *ResourceManager = NULL;
 
 char *ResManager::smExcludedDirectories = ".svn;CVS";
+const char *ResManager::smCurrentLoadName = NULL;
+const char *ResManager::defaultHash = "sha256";
+
+// ConsoleFunction's for container crypto
+//------------------------------------------------------------------------------
+ConsoleFunction(setContainerKey, bool, 3, 3, "(container, key)")
+{
+   return ResourceManager->setContainerKey(argv[1], argv[2]);
+}
+
+ConsoleFunction(setContainerHash, bool, 3, 3, "(container, hash)")
+{
+   return ResourceManager->setContainerHash(argv[1], (U8*)argv[2]);
+}
+
+ConsoleFunction(setFilterFlags, void, 2, 2, "(flags)")
+{
+   ResourceManager->setFilterFlags(dAtoi(argv[1]));
+}
+
+#ifdef RES_ENABLECONTAINERWRITE
+ConsoleFunction(touchContainer, bool, 2, 2, "(name)")
+{
+   char filename[1024];
+   Con::expandScriptFilename(filename, sizeof(filename), argv[1]);
+   return ResourceManager->touchContainer(filename);
+}
+#endif
 
 //------------------------------------------------------------------------------
 ResourceObject::ResourceObject ()
@@ -42,8 +69,6 @@
    SAFE_DELETE(mInstance);
 }
 
-
-//------------------------------------------------------------------------------
 //------------------------------------------------------------------------------
 
 ResManager::ResManager ()
@@ -60,6 +85,7 @@
    timeoutList.prev = NULL;
    registeredList = NULL;
    mLoggingMissingFiles = false;
+   mFilterFlags = FilterState::PROCESS_BASIC;
 }
 
 void ResManager::fileIsMissing(const char *fileName)
@@ -126,6 +152,13 @@
 
 ResManager::~ResManager ()
 {
+   // Clear hash list
+   for (U32 i=0;i<mHashs.size();i++)
+   {
+	   delete mHashs[i].hash;
+	   destructInPlace(&mHashs[i]);
+   }
+
    purge ();
    // volume list should be gone.
 
@@ -155,13 +188,26 @@
    {
       if (walk->mInstance != NULL)
       {
-         Con::errorf ("LoadedRes: %s/%s (%d)", walk->path, walk->name,
-             walk->lockCount);
+         Con::errorf ("LoadedRes: %s/%s  ZIP:%s/%s (%d)", walk->path, walk->name, walk->zipPath, walk->zipName,
+              walk->lockCount);
       }
       walk = walk->nextResource;
    }
 }
 
+void ResManager::dumpDetectedResources ()
+{
+   const char *loadedText = "LoadedRes: %s|%s  ZIP:%s|%s (%d)";
+   const char *regText = "Res: %s|%s  ZIP:%s|%s (%d)";
+   ResourceObject *walk = resourceList.nextResource;
+   while (walk != NULL)
+   {
+      Con::errorf (walk->mInstance ? loadedText : regText, walk->path, walk->name, walk->zipPath, walk->zipName,
+             walk->lockCount);
+      walk = walk->nextResource;
+   }
+}
+
 ConsoleFunction(dumpResourceStats, void, 1, 1, "Dump information about resources. Debug only!")
 {
    ResourceManager->dumpLoadedResources();
@@ -170,6 +216,102 @@
 #endif
 
 //------------------------------------------------------------------------------
+bool ResManager::setContainerHash(const char *filename, CryptHash *hash)
+{
+   Resource<ResContainer> myObject = ResourceManager->load(filename);
+   if (myObject.isNull()) return false;
+   if (!hash) return false;
+
+   // ResContainer won't free its hashes if we set them, so first check if the container has a hash assigned.
+   // Then, if it does, instruct it to copy the data from the supplied hash.
+
+   CryptHash *tempHash;
+   if (tempHash = myObject->getHash()) {
+      AssertFatal(tempHash->getSize() == hash->getSize(), "ResManager::setContainerKey : hash sizes do not match up!");
+      tempHash->setData(hash->getData());
+   } else {
+      // Directly set hash
+      myObject->setHash(hash);
+   }
+   return true;
+}
+
+bool ResManager::setContainerKey(const char *filename, const char *key)
+{
+   Resource<ResContainer> myObject = ResourceManager->load(filename);
+   if (myObject.isNull()) return false;
+ 
+   CryptHash *tempHash;
+   if (!(tempHash = myObject->getHash()))
+   {
+      // Manage the hash ourselves
+	  mHashs.increment();
+	  CryptHashAssoc *assoc = mHashs.end()-1;
+	  constructInPlace(assoc);
+
+	  tempHash = new CryptHash(ResManager::defaultHash);
+	  assoc->hash = tempHash;
+      assoc->container = myObject;
+      myObject->setHash(tempHash);
+   }
+
+   return tempHash->hash(key);
+}
+
+bool ResManager::setContainerHash(const char *filename, U8 *hash)
+{
+   Resource<ResContainer> myObject = ResourceManager->load(filename);
+   if (myObject.isNull()) return false;
+
+   CryptHash *tempHash;
+   if (!(tempHash = myObject->getHash()))
+   {
+      // Manage the hash ourselves
+	  mHashs.increment();
+	  CryptHashAssoc *assoc = mHashs.end()-1;
+	  constructInPlace(assoc);
+
+	  tempHash = new CryptHash(ResManager::defaultHash);
+	  assoc->hash = tempHash;
+      assoc->container = myObject;
+      myObject->setHash(assoc->hash);
+   }
+
+   tempHash->setData(hash);
+   return true;
+}
+
+bool ResManager::touchContainer(const char *filename)
+{
+#ifdef RES_ENABLECONTAINERWRITE
+   Resource<ResContainer> con = ResourceManager->load(filename);
+   if (con.isNull()) {
+      if (Stream *str = ResourceManager->openFileForWrite(filename, FileStream::Write)) {
+         ResContainer *inst = new ResContainer();
+         inst->mSourceResource = find(filename);
+         if (!inst->write(*str)) {
+            delete inst;
+            ResourceManager->closeStream(str);
+            Con::errorf("ContainerHelper: Could not write basic container!");
+            return false;
+         }
+         ResourceManager->closeStream(str);
+         // Set the ResourceObject's instance (quick way of setting up resource)
+         con = ResourceManager->setInstance(filename, inst);
+         AssertFatal(!con.isNull(), "ContainerHelper: Weird occurance!");
+         if (con.isNull()) {
+            delete inst;
+            Con::errorf("ContainerHelper: Failed to set instance!");
+            return false;
+         }
+      }
+   }
+#endif
+
+   return true;
+}
+
+//------------------------------------------------------------------------------
 
 void ResManager::create ()
 {
@@ -245,7 +387,7 @@
 
 //------------------------------------------------------------------------------
 
-static const char * buildPath (StringTableEntry path, StringTableEntry file)
+const char * ResManager::buildPath (StringTableEntry path, StringTableEntry file)
 {
    static char buf[1024];
    if (path)
@@ -279,35 +421,30 @@
 
 //------------------------------------------------------------------------------
 
-bool ResManager::scanZip (ResourceObject * zipObject)
+bool ResManager::scanContainer (ResContainer * zipObject)
 {
-  // now open the volume and add all its resources to the dictionary
-   ZipAggregate zipAggregate;
-   if (zipAggregate.
-        openAggregate (buildPath (zipObject->zipPath, zipObject->zipName)) ==
-        false)
-   {
-      Con::errorf ("Error opening zip (%s/%s), need to handle this better...",
-         zipObject->zipPath, zipObject->zipName);
-      return false;
-   }
-   ZipAggregate::iterator itr;
-   for (itr = zipAggregate.begin (); itr != zipAggregate.end (); itr++)
-   {
-      const ZipAggregate::FileEntry & rEntry = * itr;
-      ResourceObject * ro =
-         createZipResource (rEntry.pPath, rEntry.pFileName,
-            zipObject->zipPath,
-            zipObject->zipName);
-
-      ro->flags = ResourceObject::VolumeBlock;
-      ro->fileSize = rEntry.fileSize;
-      ro->compressedFileSize = rEntry.compressedFileSize;
-      ro->fileOffset = rEntry.fileOffset;
+   // Scan files in the container object.
+   // NOTE: will still find files if container load failed
+   StringTableEntry fullPath;
+   for (Vector<DirectoryEntry*>::iterator itr = zipObject->begin(); itr != zipObject->end(); itr++)
+   {
+      DirectoryEntry *dEntry = * itr;
+      fullPath = StringTable->insert(dEntry->getFullPath()); // Full path to directory (excluding ending "/")
+      for (DirectoryEntry::iterator file = dEntry->begin(); file != dEntry->end(); file++)
+      {
+         ResourceObject * ro =
+         createContainerFileResource (fullPath, StringTable->insert(file->name),
+            StringTable->insert( zipObject->mSourceResource->zipPath),
+            StringTable->insert(zipObject->mSourceResource->zipName));
+
+         ro->flags = ResourceObject::VolumeBlock;
+         ro->fileSize = file->decompressedSize;
+         ro->compressedFileSize = file->compressedSize;
+         ro->fileOffset = file->fileOffset;
 
-      dictionary.pushBehind (ro, ResourceObject::File);
+         dictionary.pushBehind (ro, ResourceObject::File);
+	  }
    }
-   zipAggregate.closeAggregate ();
 
    return true;
 }
@@ -330,19 +467,25 @@
       ResourceObject *ro = createResource (rInfo.pFullPath, rInfo.pFileName);
       dictionary.pushBehind (ro, ResourceObject::File);
 
-      ro->flags = ResourceObject::File;
       ro->fileOffset = 0;
       ro->fileSize = rInfo.fileSize;
       ro->compressedFileSize = rInfo.fileSize;
 
-      // see if it's a zip
-      const char *extension = dStrrchr (ro->name, '.');
-      if (extension && !dStricmp (extension, ".zip"))
+      ro->flags = ResourceObject::File;
+   
+      // See if it's a container
+      const char *extension = dStrrchr (rInfo.pFileName, '.');
+      if (extension && !dStricmp (extension, ".dmf"))
       {
          // Copy the path and files names to the zips resource object
-         ro->zipName = rInfo.pFileName;
+         ro->flags = ResourceObject::File;
          ro->zipPath = rInfo.pFullPath;
-         scanZip(ro);
+         ro->zipName = rInfo.pFileName;
+         Resource<ResContainer> obj = ResourceManager->load(buildPath(ro->path, ro->name));
+         if (obj.isNull()) continue;
+         obj->setFullPath(ro->path);
+         obj->open(false); // Open container stream now, rather than later
+         scanContainer(obj);
       }
    }
 }
@@ -350,10 +493,10 @@
 
 //------------------------------------------------------------------------------
 
-bool ResManager::setModZip(const char* path)
+bool ResManager::setModContainer(const char* path)
 {
-   // Get the path and add .zip to the end of the dir
-   const char* ext =  ".zip";
+   // Get the path and add .dmf to the end of the dir
+   const char* ext =  ".dmf";
    char* modPath = new char[dStrlen(path) + dStrlen(ext) + 1]; // make enough room.
    dStrcpy(modPath, path);
    dStrcat(modPath, ext);
@@ -370,39 +513,32 @@
 
       if(!dStricmp(file.pFileName, modPath))
       {
-         // Setup the resource to the zip file itself
-         ResourceObject *zip = createResource(NULL, file.pFileName);
-         dictionary.pushBehind(zip, ResourceObject::File);
-         zip->flags = ResourceObject::File;
-         zip->fileOffset = 0;
-         zip->fileSize = file.fileSize;
-         zip->compressedFileSize = file.fileSize;
-         zip->zipName = file.pFileName;
-         zip->zipPath = NULL;
-
-         // Setup the resource for the zip contents
-         // ..now open the volume and add all its resources to the dictionary
-         ZipAggregate zipAggregate;
-         if (zipAggregate.openAggregate(zip->zipName) == false)
+         // If there is already an instance of the container, use it (singleton)
+         Resource<ResContainer> con = load(file.pFileName);
+         if (con.isNull())
+            Con::errorf("ResManager::setModContainer : Container %s could failed to load!", file.pFileName);
+
+         // Scan the container
+         // NOTE: different from standard, since we have a NULL path (aka at root)
+         for (Vector<DirectoryEntry*>::iterator itr = con->begin(); itr != con->end(); itr++)
          {
-            delete [] modPath;
-            return false;
-         }
-
-         ZipAggregate::iterator itr;
-         for (itr = zipAggregate.begin (); itr != zipAggregate.end (); itr++)
-         {
-            const ZipAggregate::FileEntry &rEntry = *itr;
-
-            ResourceObject *ro = createZipResource(rEntry.pPath, rEntry.pFileName, zip->zipPath, zip->zipName);
+            DirectoryEntry *dEntry = * itr;
+            const char *relativePath = StringTable->insert(dEntry->getName());
+            for (DirectoryEntry::iterator dfile = dEntry->begin(); dfile != dEntry->end(); dfile++)
+            {
+               ResourceObject * ro =
+               createContainerFileResource (relativePath, StringTable->insert(dfile->name),
+                  NULL,
+                  file.pFileName);
+
+               ro->flags = ResourceObject::VolumeBlock;
+               ro->fileSize = dfile->decompressedSize;
+               ro->compressedFileSize = dfile->compressedSize;
+               ro->fileOffset = dfile->fileOffset;
 
-            ro->flags = ResourceObject::VolumeBlock;
-            ro->fileSize = rEntry.fileSize;
-            ro->compressedFileSize = rEntry.compressedFileSize;
-            ro->fileOffset = rEntry.fileOffset;
-            dictionary.pushBehind (ro, ResourceObject::File);
+               dictionary.pushBehind (ro, ResourceObject::File);
+			}
          }
-         zipAggregate.closeAggregate ();
 
          // Break from the loop since we got our one file
          delete [] modPath;
@@ -438,7 +574,7 @@
    // detach all the files.
    for (ResourceObject * pwalk = resourceList.nextResource; pwalk;
          pwalk = pwalk->nextResource)
-      pwalk->flags = ResourceObject::Added;
+      pwalk->flags |= ResourceObject::Added;
 
    U32 pathLen = 0;
 
@@ -453,7 +589,7 @@
    {
       if (!Platform::isSubDirectory (Platform::getWorkingDirectory (), paths[i]) || Platform::isExcludedDirectory(paths[i]))
       {
-         if (!setModZip(paths[i]))
+         if (!setModContainer(paths[i]))
          {
             Con::errorf ("setModPaths: invalid mod path directory name: '%s'", paths[i]);
             continue;
@@ -462,7 +598,7 @@
       pathLen += (dStrlen (paths[i]) + 1);
 
       // Load zip first so that local files override
-      setModZip(paths[i]);
+      setModContainer(paths[i]);
       searchPath (paths[i]);
 
       // Copy this path to the validPaths list
@@ -539,8 +675,18 @@
    ResourceObject * ro = find (fileName);
    if (!ro)
       return 0;
-   else
-      return ro->fileSize;
+   else 
+   {
+      if (ro->flags & ResourceObject::Modified) {
+         // Open again to re-calculate file size
+         Stream *str = ResourceManager->openStream(fileName);
+         if (str)
+			 ResourceManager->closeStream(str);
+		 ro->flags ^= ResourceObject::Modified;
+	  }
+   }
+
+   return ro->fileSize;
 }
 
 //------------------------------------------------------------------------------
@@ -664,7 +810,7 @@
    AssertFatal (obj->lockCount > 0,
           "ResourceManager::unlock: lock count is zero.");
 
-   //set the timeout to the max requested
+   // set the timeout to the max requested
 
    if (--obj->lockCount == 0)
       obj->linkAfter (&timeoutList);
@@ -795,6 +941,8 @@
        return NULL;
    }
 
+   smCurrentLoadName = obj->name;
+
    ResourceInstance *ret = createFunction (*stream);
    if(ret)
       ret->mSourceResource = obj;
@@ -823,67 +971,54 @@
    if (echoFileNames)
       Con::printf ("FILE ACCESS: %s/%s", obj->path, obj->name);
 
-   // used for openStream stream access
-   FileStream *diskStream = NULL;
-
-   // if disk file
-   if (obj->flags & (ResourceObject::File))
+   if (!dStrcmp(obj->name, "flat.mis"))
    {
-      diskStream = new FileStream;
-      if( !diskStream->open (buildPath (obj->path, obj->name), FileStream::Read) )
-      {
-         delete diskStream;
-         return NULL;
-      }
-      obj->fileSize = diskStream->getStreamSize ();
-      return diskStream;
+	   int f=1;
    }
 
-   // if zip file
+   // used for openStream stream access
+   FileStream *diskStream = NULL;
 
-   if (obj->flags & ResourceObject::VolumeBlock)
+   // If in container file, go for another pass loading container object
+   if (obj->flags & (ResourceObject::VolumeBlock))
    {
-      diskStream = new FileStream;
-      diskStream->open (buildPath (obj->zipPath, obj->zipName),
-         FileStream::Read);
+      // Get name of container
+      const char *fname = buildPath(obj->zipPath, obj->zipName);
 
-      diskStream->setPosition (obj->fileOffset);
+      Resource<ResContainer> con = ResourceManager->load(fname);
+      if (con.isNull()) {
+         Con::errorf("ResourceManager::loadStream: Container '%s' not loaded", fname);
+         return NULL;
+	  }
 
-      ZipLocalFileHeader zlfHeader;
-      if (zlfHeader.readFromStream (*diskStream) == false)
-      {
-         Con::errorf("ResourceManager::loadStream: '%s' Not in the zip! (%s/%s)",
-            obj->name, obj->zipPath, obj->zipName);
-         diskStream->close ();
+      DirectoryEntry::iterator file = con->getFile(obj);
+      if (!file) {
          return NULL;
       }
 
-      if (zlfHeader.m_header.compressionMethod == ZipLocalFileHeader::Stored
-            || obj->fileSize == 0)
-      {
-         // Just read straight from the stream...
-         ResizeFilterStream *strm = new ResizeFilterStream;
-         strm->attachStream (diskStream);
-         strm->setStreamOffset (diskStream->getPosition (), obj->fileSize);
-         return strm;
+      // Update file info and return stream
+      ResFilter *str = con->getFileStream(obj);
+      if (str) {
+          obj->compressedFileSize = file->compressedSize;
+          obj->fileSize = file->decompressedSize;
+          return str;
+      } else
+          // We have a little trouble getting the file from the container; likely crypt'd
+          Con::errorf("ResourceManager::loadStream: requested file is encrypted");
+   }
+   else if (obj->flags & (ResourceObject::File))
+   {
+      // Must be on disk, so first open the filestream...
+      diskStream = new FileStream;
+      bool success = diskStream->open (buildPath (obj->path, obj->name), FileStream::Read);
+      if (!success) {
+         delete diskStream;
+         return NULL;
       }
       else
       {
-         if (zlfHeader.m_header.compressionMethod ==
-            ZipLocalFileHeader::Deflated)
-         {
-            ZipSubRStream *zipStream = new ZipSubRStream;
-            zipStream->attachStream (diskStream);
-            zipStream->setUncompressedSize (obj->fileSize);
-            return zipStream;
-         }
-         else
-         {
-            AssertFatal (false,avar("ResourceManager::loadStream: '%s' Compressed inappropriately in the zip! (%s/%s)",
-               obj->name, obj->zipPath, obj->zipName));
-            diskStream->close ();
-            return NULL;
-         }
+         obj->fileSize = diskStream->getStreamSize ();
+         return diskStream;
       }
    }
 
@@ -895,20 +1030,47 @@
 
 void ResManager::closeStream (Stream * stream)
 {
-   // Try to cast the stream to a FilterStream
-   FilterStream* subStream = dynamic_cast<FilterStream*>(stream);
-
-   // While the sub-stream is valid (meaning it was successfully cast to a FilterStream)
-   while (subStream)
-   {
-      // Point stream to the Stream contained within the current FilterStream
-      stream = subStream->getStream();
-      // Detach the sub-stream FilterStream from the Stream contained within it
-      subStream->detachStream();
-      // Delete the FilterStream that was wrapping stream
-      delete subStream;
-      // Try to cast the stream (which was already contained within a FilterStream) to a FilterStream
-      subStream = dynamic_cast<FilterStream*>(stream);
+   ResFilter *subStream = dynamic_cast < ResFilter * >(stream);
+   // First, deal with files that need to be flushed, or updated
+   if (stream->hasCapability(Stream::StreamWrite)) {
+      // Filter?
+      if (subStream) {
+         ResourceObject *owner = subStream->getResource();
+         stream = subStream->getStream();
+         // In Container
+         if (owner && (owner->flags & ResourceObject::VolumeBlock)) {
+            // Likely attatched to a DynMemStream
+            DynMemStream *mem = dynamic_cast < DynMemStream * >(subStream->getStream());
+            if (mem) {
+               // Dump to container...
+               const char *str = buildPath(owner->zipPath, owner->zipName);
+               Resource<ResContainer> con = load(str);
+               con->open(true);
+               const char *ext = dStrrchr(owner->path, '.');
+               if (ext) {
+                  if (!dStrnicmp(ext, ".dmf", 4)) {
+                     ext += 4;
+                     str = (*ext == '\0') ? owner->name : buildPath(ext+1, owner->name);
+                     subStream->detachStream(); // Make sure data has been flushed
+                     con->addFilteredFile(str, mem->getData(), mem->getStreamSize(), subStream->getStreamSize(), subStream->getFlags());
+                     //con->write();
+                  } else {
+                     AssertFatal(false, "Extension Mismatch");
+                  }
+               }
+               else Con::errorf("ResContainer: Failed to write file '%s'", str);
+            }
+         }
+         delete subStream;
+      }
+      // Ok, then must be pure
+    }
+   // Alternatively, delete stream and filterstream if present
+   else {
+      if (subStream) {
+         stream = subStream->getStream();
+         delete subStream;
+      }
    }
 
    delete stream;
@@ -991,6 +1153,26 @@
 }
 
 //------------------------------------------------------------------------------
+// Set resource instance
+
+ResourceObject *ResManager::setInstance (const char *name, ResourceInstance *instance)
+{
+   StringTableEntry path, file;
+   getPaths (name, path, file);
+
+   ResourceObject *obj = dictionary.find (path, file);
+   if (obj) {
+      if (obj->mInstance) return NULL;
+      obj->mInstance = instance;
+      instance->mSourceResource = obj;
+      // Increment lock count
+      obj->lockCount++;
+      obj->unlink ();      // remove from purge list
+   }
+   return obj;
+}
+
+//------------------------------------------------------------------------------
 
 void ResManager::purge ()
 {
@@ -1173,7 +1355,7 @@
 
 //------------------------------------------------------------------------------
 
-ResourceObject * ResManager::createZipResource (StringTableEntry path, StringTableEntry file,
+ResourceObject * ResManager::createContainerFileResource (StringTableEntry path, StringTableEntry file,
    StringTableEntry zipPath,
    StringTableEntry zipName)
 {
@@ -1222,29 +1404,116 @@
 
 //------------------------------------------------------------------------------
 
-bool ResManager::openFileForWrite (FileStream & stream, const char *fileName, U32 accessMode)
+ResourceObject *ResManager::handleNewContainerFile(const char *path, const char *file)
 {
-   if (!isValidWriteFileName (fileName))
-      return false;
+   ResourceObject *ro = NULL;
+
+#ifdef RES_ENABLECONTAINERWRITE
+   const char *ext = path;
+   U32 mark; mark = FrameAllocator::getWaterMark();
+   while (ext = dStrchr(ext, '.')) {
+      if (!dStrncmp(ext, ".dmf", 4)) {
+         // We've found where the container starts in fileName
+         U32 cmpLen = (ext - path) + 4;
+         char *containerName = (char*)FrameAllocator::alloc(cmpLen+1);
+         dStrncpy(containerName, path, cmpLen);
+         containerName[cmpLen] = '\0';
+
+         // Now load the container; Touch first to ensure it exists
+         touchContainer(containerName);
+         Resource<ResContainer> con = load(StringTable->insert(containerName));
+         
+         // Ok, so we now have a container to put our file into...
+         // We need to make the corresponding resource
+         ro = createContainerFileResource (StringTable->insert (path), StringTable->insert (file),
+                     StringTable->insert(con->mSourceResource->path),
+                     StringTable->insert(con->mSourceResource->name));
+         
+         ro->flags = ResourceObject::VolumeBlock | ResourceObject::Modified;
+         ro->fileOffset = 0;
+         ro->fileSize = 0;
+         ro->compressedFileSize = 0;
+         
+         break;
+      }
+      ext++;
+   }
+   FrameAllocator::setWaterMark(mark);
+#endif
 
+   return ro;
+}
+
+Stream *ResManager::openFileForWrite (const char *fileName, U32 accessMode)
+{
+   if (!isValidWriteFileName (fileName))
+      return NULL;
+   
    // tag it on to the first directory
    char path[1024];
    dStrcpy (path, fileName);
    char *file = dStrrchr (path, '/');
    if (!file)
-      return false;      // don't allow storing files in root
+      return NULL;      // don't allow storing files in root
    *file++ = 0;
 
-   if (!Platform::createPath (fileName))   // create directory tree
-      return false;
-   if (!stream.open (fileName, (FileStream::AccessMode) accessMode))
-      return false;
+   ResourceObject *ro = find(fileName);
+   if (!ro) {
+#ifdef RES_ENABLECONTAINERWRITE
+	  // Resource doesn't exist, but we might be looking for a container (.dmf/)
+      ro = handleNewContainerFile(path, file);
+      if (!ro) 
+#endif
+	  {
+         // Ok, so we must have a regular file...
+         if (!Platform::createPath (fileName))   // create directory tree
+            return NULL;
+         ro = createResource (StringTable->insert (path), StringTable->insert (file));
+         
+         ro->flags = ResourceObject::File | ResourceObject::Modified;
+         ro->fileOffset = 0;
+         ro->fileSize = 0;
+         ro->compressedFileSize = 0;
+      }
+   }
 
-   // create a resource for the file.
-   ResourceObject *ro = createResource (StringTable->insert (path), StringTable->insert (file));
-   ro->flags = ResourceObject::File;
-   ro->fileOffset = 0;
-   ro->fileSize = 0;
-   ro->compressedFileSize = 0;
-   return true;
+   return ro ? openResourceForWrite(ro, accessMode) : NULL;
 }
+
+Stream *ResManager::openResourceForWrite (ResourceObject *ro, U32 accessMode)
+{
+#ifdef RES_ENABLECONTAINERWRITE
+   if (ro->flags & ResourceObject::VolumeBlock)
+   {
+      // Create ResFilter by looking for according file in ContainerObject
+      Resource<ResContainer> con = load(buildPath(ro->zipPath, ro->zipName));
+      if (con) {
+         // Container exists, so we can go ahead with creating the temp stream
+         // closeStream() will add/replace the entry in the container
+         DynMemStream *strm = new DynMemStream(1024);
+         // And attach the filter...
+         ResFilter *filter = con->getFilter(mFilterFlags);
+         filter->setResource(ro);
+            
+         filter->attachStream(strm, true);
+         filter->setHash(con->getHash());
+         filter->setStreamOffset(0, 0);
+
+         return filter;
+      }
+   }
+   else
+#endif
+   if (ro->flags & ResourceObject::File)
+   {
+      // Just open a regular file
+      FileStream *fs = new FileStream();
+      if (!fs->open (buildPath(ro->path, ro->name), (FileStream::AccessMode) accessMode)) {
+         delete fs;
+         return NULL;
+      }
+      return fs;
+   }
+   return NULL;
+}
+
diff -u -r /cygdrive/c/Torque/SDK/engine/core/resManager.h ./core/resManager.h
--- /cygdrive/c/Torque/SDK/engine/core/resManager.h	2006-10-25 22:37:52.000000000 +0100
+++ ./core/resManager.h	2006-11-07 23:13:52.609375000 +0000
@@ -19,24 +19,16 @@
 #ifndef _FILESTREAM_H_
 #include "core/fileStream.h"
 #endif
-#ifndef _ZIPSUBSTREAM_H_
-#include "core/zipSubStream.h"
-#endif
-#ifndef _ZIPAGGREGATE_H_
-#include "core/zipAggregate.h"
-#endif
-#ifndef _ZIPHEADERS_H_
-#include "core/zipHeaders.h"
-#endif
 #ifndef _CRC_H_
 #include "core/crc.h"
 #endif
 
 class Stream;
 class FileStream;
-class ZipSubRStream;
 class ResManager;
 class FindMatch;
+class ResContainer;
+class CryptHash;
 
 extern ResManager *ResourceManager;
 
@@ -128,9 +120,10 @@
 public:
    enum Flags
    {
-      VolumeBlock   = BIT(0),
-      File          = BIT(1),
-      Added         = BIT(2),
+      VolumeBlock   = BIT(0), ///< Is in a volume
+      File          = BIT(1), ///< Is a file on disk
+      Added         = BIT(2), ///< New?
+      Modified      = BIT(3), ///< We should re-calculate according size
    };
    S32 flags;  ///< Set from Flags.
 
@@ -324,6 +317,12 @@
 class ResManager
 {
 private:
+	typedef struct
+	{
+		CryptHash *hash;
+		Resource<ResContainer> container;
+	} CryptHashAssoc;
+
    /// Path to which we will write data.
    ///
    /// This is used when, for instance, we download files from a server.
@@ -342,19 +341,22 @@
 
    bool echoFileNames;
 
+   Vector<CryptHashAssoc> mHashs;
+   U32 mFilterFlags;
+
    bool isIgnoredSubdirectoryName(const char *name) const;
 
-   /// Scan a zip file for resources.
-   bool scanZip(ResourceObject *zipObject);
+   /// Scan a container file for resources.
+   bool scanContainer(ResContainer *zipObject);
 
    /// Create a ResourceObject from the given file.
-   ResourceObject* createResource(StringTableEntry path, StringTableEntry file);
-
-   /// Create a ResourceObject from the given file in a zip file.
-   ResourceObject* createZipResource(StringTableEntry path, StringTableEntry file, StringTableEntry zipPath, StringTableEntry zipFle);
+   ResourceObject*  createResource(StringTableEntry path, StringTableEntry file);
 
+   /// Create a ResourceObject from the given file in a container file.
+   ResourceObject*  createContainerFileResource(StringTableEntry path, StringTableEntry file, StringTableEntry zipPath, StringTableEntry zipFle);
+ 
    void searchPath(const char *pathStart);
-   bool setModZip(const char* path);
+   bool setModContainer(const char* path);
 
    struct RegisteredExtension
    {
@@ -382,6 +384,8 @@
    static void create();
    static void destroy();
 
+   static const char *smCurrentLoadName;
+
    /// Load the excluded directories from the resource manager pref and
    /// stuff it into the platform layer.
    static void initExcludedDirectories();
@@ -416,6 +420,10 @@
 
    /// Add a new resource instance
    bool add(const char* name, ResourceInstance *addInstance, bool extraLock = false);
+   
+   /// Sets instance of resource. Fails if resource already has instance, or resource does not exist.
+   /// Returns pointer to ResourceObject that instance has been set on
+   ResourceObject *setInstance(const char *name, ResourceInstance *instance);
 
    /// Searches the hash list for the filename and returns it's object if found, otherwise NULL
    ResourceObject* find(const char * fileName);
@@ -449,11 +457,27 @@
    void setWriteablePath(const char *path);           ///< Sets the writable path for a file to the one given.
    bool isValidWriteFileName(const char *fn);         ///< Checks to see if the given path is valid for writing.
 
+   /// @name Container Routines
+   /// @{
+   bool setContainerKey(const char *filename, const char *key); ///< Sets crypt key, creating a hash
+   bool setContainerHash(const char *filename, U8 *hash);       ///< Sets crypt key using hash data. Creates a new hash object
+   bool setContainerHash(const char *filename, CryptHash *hash);///< Sets crypt key using a referred hash. Does not cleanup hash!
+   static const char* defaultHash;                              ///< Name of default hash used in ResourceManager
+
+   void setFilterFlags(U32 flags) {mFilterFlags = flags;}
+   bool touchContainer(const char *filename);                   ///< Creates new container if one doesn't exist
+   /// @}
+
    /// Opens a file for writing!
-   bool openFileForWrite(FileStream &fs, const char *fileName, U32 accessMode = 1);
+   Stream* openResourceForWrite(ResourceObject *ro, U32 accessMode = 1);
+   Stream* openFileForWrite(const char *fileName, U32 accessMode = 1);
+   ResourceObject *handleNewContainerFile(const char *path, const char *fileName);
+ 
+   static const char *buildPath(StringTableEntry path, StringTableEntry file);
 
 #ifdef TORQUE_DEBUG
    void dumpLoadedResources();                        ///< Dumps all loaded resources to the console.
+   void dumpDetectedResources();					  ///< Dumps all detected resources to the console.
 #endif
 };
 
